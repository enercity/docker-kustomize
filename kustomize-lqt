#!/bin/bash

SERVICE=$1
SERVICE_TYPE=$2
ENVIRONMENT=$3
TAG=$4
DRY=$5
IFS=',' read -r -a ENVIRONMENTS <<< "$ENVIRONMENT"
SUPPORTED_ENVS=(dev stage prod migration testing)

SYNTAX='
Syntax:
./kustomize-lqt {SERVICE} {SERVICE_TYPE} {ENVIRONMENT} {TAG}
---
Description
SERVICE        = technical service name - required
SERVICE_TYPE   = k8s|ecs - required
ENVIRONMENT    = dev|stage|prod, comma separated - required
 (alternative) = dev_1.20.1|stage_1.20.1|prod_1.20.1|v1.20.1|v1.20.1-rc
TAG            = name of file to be generated, will show up in all dropdown lists - optional, default: DRONE_COMMIT_SHA
'


############### ######### ###############
############### parameter ###############
############### ######### ###############

if [ -z "$SERVICE" ]; then
  echo "SERVICE may not be empty"
  echo "$SYNTAX"
  exit 1
fi

if [ -z "$SERVICE_TYPE" ]; then
  echo "SERVICE_TYPE may not be empty, use k8s or ecs"
  echo "$SYNTAX"
  exit 1
fi

if [ -z "$ENVIRONMENT" ]; then
  echo "ENVIRONMENT may not be empty, use dev|stage|prod and comma separated values"
  echo "Alternative use tagging syntax like dev_1.20.1|stage_1.20.1|prod_1.20.1|v1.20.1|v1.20.1-rc"
  echo "$SYNTAX"
  exit 1
fi

if [ -z "${DRONE_COMMIT_SHA}" ]; then
  echo "DRONE_COMMIT_SHA may not be empty"
  echo "$SYNTAX"
  exit 1
fi

if [ -z "$TAG" ]; then
  TAG=${DRONE_COMMIT_SHA}
fi

CONFIG_BASE=kubernetes
if [ "$SERVICE_TYPE" == "ecs" ]; then
  CONFIG_BASE=awsbatchjob
fi


############### ######### ###############
############### functions ###############
############### ######### ###############
trigger () {
      echo ""
      echo "-"
      echo "Trying to process $SERVICE_TYPE/$CLIENT/$ENVIRONMENT/$SERVICE/manifest-$TAG.yaml"

      if [ ! -d "$BUILD_DIR" ]; then
        echo "BUILD_DIR: $BUILD_DIR does not exist, skipping"
        return
      fi

      if [ ! -z "${DRY}" ] && [ "$DRY" = "dry" ]; then
         echo "##dry mode##"
         echo "mkdir -p $SERVICE_TYPE/$CLIENT/$ENVIRONMENT/$SERVICE/"
         echo "kustomize build $BUILD_DIR > $SERVICE_TYPE/$CLIENT/$ENVIRONMENT/$SERVICE/manifest-$TAG.yaml"
         echo "##dry mode##"
         echo "-"
      else
        mkdir -p $SERVICE_TYPE/$CLIENT/$ENVIRONMENT/$SERVICE/
        echo "kustomize build $BUILD_DIR > $SERVICE_TYPE/$CLIENT/$ENVIRONMENT/$SERVICE/manifest-$TAG.yaml"
        kustomize build $BUILD_DIR > $SERVICE_TYPE/$CLIENT/$ENVIRONMENT/$SERVICE/manifest-$TAG.yaml
        echo "-"
      fi
}



############### #### ###############
############### main ###############
############### #### ###############

FOLDER=$CONFIG_BASE/overlays/
CLIENTS=($FOLDER*)

echo "Setting currentVersion, serviceTag and initTag: ${DRONE_COMMIT_SHA}"
SEDOPTION="-i"
if [[ "$OSTYPE" == "darwin"* ]]; then
  SEDOPTION="-i ''"
fi

sed $SEDOPTION -e 's/currentVersion/'"${DRONE_COMMIT_SHA}"'/g' $CONFIG_BASE/base/kustomization.yaml
sed $SEDOPTION -e 's/serviceTag/'"generic-${DRONE_COMMIT_SHA}"'/g' $CONFIG_BASE/base/kustomization.yaml
sed $SEDOPTION -e 's/initTag/'"generic-init-${DRONE_COMMIT_SHA}"'/g' $CONFIG_BASE/base/kustomization.yaml

echo "Clients found: ${CLIENTS[*]}"
echo "Environments to process: ${ENVIRONMENTS[*]}"

if [[ $ENVIRONMENTS == *"luchshausen"* ]]; then
  CLIENT="luchshausen"
  ENVIRONMENT="prod"
  echo "Updated environment variable from $ENVIRONMENTS to $ENVIRONMENT"
  BUILD_DIR=kubernetes/overlays/$CLIENT/$ENVIRONMENT/
  trigger $SERVICE_TYPE $CLIENT $$ENVIRONMENT $SERVICE $TAG $BUILD_DIR

else
  for DIR in "${CLIENTS[@]}"
  do
    if [[ ${#ENVIRONMENTS[@]} == 1 ]]; then
      if [[ $ENVIRONMENTS == *"rc"* ]]; then
          new_environment="dev,stage"
          echo "Updated environment variable from $ENVIRONMENTS to $new_environment"
          IFS=',' read -r -a ENVIRONMENTS <<< "$new_environment"
      elif [[ $ENVIRONMENTS == *"-dev"* ]]; then
          new_environment="dev"
          echo "Updated environment variable from $ENVIRONMENTS to $new_environment"
          IFS=',' read -r -a ENVIRONMENTS <<< "$new_environment"
      elif [[ ${ENVIRONMENT//[0-9_.]/} == "v" ]]; then
          new_environment="dev,stage,prod"
          echo "Updated environment variable from $old_environments to $new_environment"
          IFS=',' read -r -a ENVIRONMENTS <<< "$new_environment"
      fi
    fi
    for ENVIRONMENT in "${ENVIRONMENTS[@]}"
    do
      if [[ $ENVIRONMENT =~ ['0-9_.'] ]]; then
        old_environment=$ENVIRONMENT
        ENVIRONMENT=${ENVIRONMENT//[0-9_.]/}
        echo "Updated environment variable from $old_environment to $ENVIRONMENT"
      fi
      if [[ ! " ${SUPPORTED_ENVS[*]} " =~ " ${ENVIRONMENT} " ]]; then
        echo "Not supported: " $ENVIRONMENT
        exit 1
      fi

      CLIENT=${DIR#"$FOLDER"}
      BUILD_DIR=$DIR/$ENVIRONMENT/

      trigger $SERVICE_TYPE $CLIENT $ENVIRONMENT $SERVICE $TAG $BUILD_DIR

    done
  done
fi

